<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Hugo Blog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content on My Hugo Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2025 00:20:36 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>celery分布式调度</title>
      <link>http://localhost:1313/post/celery/</link>
      <pubDate>Tue, 28 Jan 2025 00:20:36 +0800</pubDate>
      <guid>http://localhost:1313/post/celery/</guid>
      <description>&lt;h1 id=&#34;celery-分布式调度原理实践与应用&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#celery-%e5%88%86%e5%b8%83%e5%bc%8f%e8%b0%83%e5%ba%a6%e5%8e%9f%e7%90%86%e5%ae%9e%e8%b7%b5%e4%b8%8e%e5%ba%94%e7%94%a8&#34;&gt;&lt;/a&gt;&#xA;Celery 分布式调度：原理、实践与应用&#xA;&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%bc%95%e8%a8%80&#34;&gt;&lt;/a&gt;&#xA;引言&#xA;&lt;/h2&gt;&lt;p&gt;在现代软件开发中，处理异步任务和分布式调度是一个常见的需求。当我们的应用程序需要处理大量耗时的任务，如文件处理、数据挖掘、发送邮件等，如果采用同步方式处理，会导致应用程序响应变慢，甚至阻塞。Celery 作为一个强大的分布式任务队列系统，为我们提供了一种优雅的解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-celery&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-celery&#34;&gt;&lt;/a&gt;&#xA;什么是 Celery&#xA;&lt;/h2&gt;&lt;p&gt;Celery 是一个基于 Python 开发的分布式任务队列系统，它允许你将耗时的任务异步执行，从而提高应用程序的性能和响应速度。Celery 的核心概念包括任务（Task）、消息队列（Broker）和结果后端（Result Backend）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;任务task&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1task&#34;&gt;&lt;/a&gt;&#xA;任务（Task）&#xA;&lt;/h3&gt;&lt;p&gt;任务是你想要异步执行的代码片段，通常是一个 Python 函数。例如，以下是一个简单的 Celery 任务示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; celery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Celery&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建 Celery 实例&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Celery(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;, broker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis://localhost:6379/0&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.task&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x, y):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;消息队列broker&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97broker&#34;&gt;&lt;/a&gt;&#xA;消息队列（Broker）&#xA;&lt;/h3&gt;&lt;p&gt;消息队列用于在任务生产者和任务消费者之间传递任务消息。Celery 支持多种消息队列，如 RabbitMQ、Redis 等。消息队列的作用是将任务生产者发送的任务消息存储起来，等待任务消费者来获取并执行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;消息后端result-backend&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e5%90%8e%e7%ab%afresult-backend&#34;&gt;&lt;/a&gt;&#xA;消息后端（Result Backend）&#xA;&lt;/h3&gt;&lt;p&gt;结果后端用于存储任务的执行结果。当任务执行完成后，结果会被发送到结果后端，你可以通过任务的 ID 来获取任务的执行结果。常见的结果后端有 Redis、Memcached、数据库等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;celery-的工作原理&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#celery-%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;&lt;/a&gt;&#xA;Celery 的工作原理&#xA;&lt;/h3&gt;&lt;p&gt;Celery 的工作原理可以简单概括为以下几个步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;任务生产者：应用程序将任务发送到消息队列中。&lt;/li&gt;&#xA;&lt;li&gt;消息队列：消息队列接收并存储任务消息。&lt;/li&gt;&#xA;&lt;li&gt;任务消费者：Celery 工作进程（Worker）从消息队列中获取任务消息，并执行任务。&lt;/li&gt;&#xA;&lt;li&gt;结果后端：任务执行完成后，结果被发送到结果后端存储。&lt;/li&gt;&#xA;&lt;li&gt;结果获取：应用程序可以通过任务的 ID 从结果后端获取任务的执行结果。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;实践使用-celery-实现分布式调度&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%9e%e8%b7%b5%e4%bd%bf%e7%94%a8-celery-%e5%ae%9e%e7%8e%b0%e5%88%86%e5%b8%83%e5%bc%8f%e8%b0%83%e5%ba%a6&#34;&gt;&lt;/a&gt;&#xA;实践：使用 Celery 实现分布式调度&#xA;&lt;/h2&gt;&lt;h3 id=&#34;安装celery和redis&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85celery%e5%92%8credis&#34;&gt;&lt;/a&gt;&#xA;安装celery和redis&#xA;&lt;/h3&gt;&lt;p&gt;首先，我们需要安装 Celery 和 Redis。可以使用以下命令进行安装：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>http://localhost:1313/post/hello/</link>
      <pubDate>Wed, 15 Mar 2023 11:00:00 -0700</pubDate>
      <guid>http://localhost:1313/post/hello/</guid>
      <description>&lt;p&gt;💘 博麗 霊夢 💘&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
