<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Hugo Blog</title><link>https://Martindeeepdark.github.io/</link><description>Recent content on My Hugo Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 28 Jan 2025 00:20:36 +0800</lastBuildDate><atom:link href="https://Martindeeepdark.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>celery分布式调度</title><link>https://Martindeeepdark.github.io/post/celery/</link><pubDate>Tue, 28 Jan 2025 00:20:36 +0800</pubDate><guid>https://Martindeeepdark.github.io/post/celery/</guid><description>&lt;h1 id="celery-分布式调度原理实践与应用">
&lt;a class="header-anchor" href="#celery-%e5%88%86%e5%b8%83%e5%bc%8f%e8%b0%83%e5%ba%a6%e5%8e%9f%e7%90%86%e5%ae%9e%e8%b7%b5%e4%b8%8e%e5%ba%94%e7%94%a8">&lt;/a>
Celery 分布式调度：原理、实践与应用
&lt;/h1>&lt;h2 id="引言">
&lt;a class="header-anchor" href="#%e5%bc%95%e8%a8%80">&lt;/a>
引言
&lt;/h2>&lt;p>在现代软件开发中，处理异步任务和分布式调度是一个常见的需求。当我们的应用程序需要处理大量耗时的任务，如文件处理、数据挖掘、发送邮件等，如果采用同步方式处理，会导致应用程序响应变慢，甚至阻塞。Celery 作为一个强大的分布式任务队列系统，为我们提供了一种优雅的解决方案。&lt;/p>
&lt;h2 id="什么是-celery">
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-celery">&lt;/a>
什么是 Celery
&lt;/h2>&lt;p>Celery 是一个基于 Python 开发的分布式任务队列系统，它允许你将耗时的任务异步执行，从而提高应用程序的性能和响应速度。Celery 的核心概念包括任务（Task）、消息队列（Broker）和结果后端（Result Backend）。&lt;/p>
&lt;h3 id="任务task">
&lt;a class="header-anchor" href="#%e4%bb%bb%e5%8a%a1task">&lt;/a>
任务（Task）
&lt;/h3>&lt;p>任务是你想要异步执行的代码片段，通常是一个 Python 函数。例如，以下是一个简单的 Celery 任务示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> celery &lt;span style="color:#f92672">import&lt;/span> Celery
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 创建 Celery 实例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> Celery(&lt;span style="color:#e6db74">&amp;#39;tasks&amp;#39;&lt;/span>, broker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;redis://localhost:6379/0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.task&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(x, y):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x &lt;span style="color:#f92672">+&lt;/span> y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="消息队列broker">
&lt;a class="header-anchor" href="#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97broker">&lt;/a>
消息队列（Broker）
&lt;/h3>&lt;p>消息队列用于在任务生产者和任务消费者之间传递任务消息。Celery 支持多种消息队列，如 RabbitMQ、Redis 等。消息队列的作用是将任务生产者发送的任务消息存储起来，等待任务消费者来获取并执行。&lt;/p>
&lt;h3 id="消息后端result-backend">
&lt;a class="header-anchor" href="#%e6%b6%88%e6%81%af%e5%90%8e%e7%ab%afresult-backend">&lt;/a>
消息后端（Result Backend）
&lt;/h3>&lt;p>结果后端用于存储任务的执行结果。当任务执行完成后，结果会被发送到结果后端，你可以通过任务的 ID 来获取任务的执行结果。常见的结果后端有 Redis、Memcached、数据库等。&lt;/p>
&lt;h3 id="celery-的工作原理">
&lt;a class="header-anchor" href="#celery-%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86">&lt;/a>
Celery 的工作原理
&lt;/h3>&lt;p>Celery 的工作原理可以简单概括为以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>任务生产者：应用程序将任务发送到消息队列中。&lt;/li>
&lt;li>消息队列：消息队列接收并存储任务消息。&lt;/li>
&lt;li>任务消费者：Celery 工作进程（Worker）从消息队列中获取任务消息，并执行任务。&lt;/li>
&lt;li>结果后端：任务执行完成后，结果被发送到结果后端存储。&lt;/li>
&lt;li>结果获取：应用程序可以通过任务的 ID 从结果后端获取任务的执行结果。&lt;/li>
&lt;/ol>
&lt;h2 id="实践使用-celery-实现分布式调度">
&lt;a class="header-anchor" href="#%e5%ae%9e%e8%b7%b5%e4%bd%bf%e7%94%a8-celery-%e5%ae%9e%e7%8e%b0%e5%88%86%e5%b8%83%e5%bc%8f%e8%b0%83%e5%ba%a6">&lt;/a>
实践：使用 Celery 实现分布式调度
&lt;/h2>&lt;h3 id="安装celery和redis">
&lt;a class="header-anchor" href="#%e5%ae%89%e8%a3%85celery%e5%92%8credis">&lt;/a>
安装celery和redis
&lt;/h3>&lt;p>首先，我们需要安装 Celery 和 Redis。可以使用以下命令进行安装：&lt;/p></description></item><item><title>Hello World</title><link>https://Martindeeepdark.github.io/post/hello/</link><pubDate>Wed, 15 Mar 2023 11:00:00 -0700</pubDate><guid>https://Martindeeepdark.github.io/post/hello/</guid><description>&lt;p>💘 博麗 霊夢 💘&lt;/p></description></item><item><title>关于</title><link>https://Martindeeepdark.github.io/about/</link><pubDate>Thu, 09 Jun 2022 20:12:52 +0800</pubDate><guid>https://Martindeeepdark.github.io/about/</guid><description/></item><item><title>友情链接</title><link>https://Martindeeepdark.github.io/friend/</link><pubDate>Thu, 09 Jun 2022 20:12:52 +0800</pubDate><guid>https://Martindeeepdark.github.io/friend/</guid><description>&lt;h2 id="本站信息">
&lt;a class="header-anchor" href="#%e6%9c%ac%e7%ab%99%e4%bf%a1%e6%81%af">&lt;/a>
本站信息
&lt;/h2>&lt;ul>
&lt;li>站名： 拔剑Sketon&lt;/li>
&lt;li>站长： 拔剑Sketon&lt;/li>
&lt;/ul>
&lt;h2 id="申请方法">
&lt;a class="header-anchor" href="#%e7%94%b3%e8%af%b7%e6%96%b9%e6%b3%95">&lt;/a>
申请方法
&lt;/h2>&lt;ul>
&lt;li>添加本站后，在本页留言，格式如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">```yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#75715e">#您的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#75715e">#您的网址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">desc&lt;/span>: &lt;span style="color:#75715e">#简短描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#75715e">#一张图片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">```&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="小伙伴们">
&lt;a class="header-anchor" href="#%e5%b0%8f%e4%bc%99%e4%bc%b4%e4%bb%ac">&lt;/a>
小伙伴们
&lt;/h2></description></item><item><title/><link>https://Martindeeepdark.github.io/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Martindeeepdark.github.io/readme/</guid><description>&lt;h1 id="hugo-使用指南">
&lt;a class="header-anchor" href="#hugo-%e4%bd%bf%e7%94%a8%e6%8c%87%e5%8d%97">&lt;/a>
Hugo 使用指南
&lt;/h1>&lt;p>本指南记录了 Hugo 的基本使用方法和常用命令，方便快速查阅。&lt;/p>
&lt;ol>
&lt;li>安装 Hugo
1.1 安装 Hugo 扩展版
Hugo 扩展版支持 Sass/SCSS 等高级功能。推荐使用扩展版。&lt;/li>
&lt;/ol>
&lt;p>Linux/macOS：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/gohugoio/hugo/releases/download/v0.125.7/hugo_extended_0.125.7_linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -xzf hugo_extended_*.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mv hugo /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>复制
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 应输出：hugo v0.125.7+extended...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>创建新文章
2.1 使用模板创建文章
Hugo 会根据 archetypes 目录下的模板文件生成新文章。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new post/my-first-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认元数据：
新创建的文章会包含以下默认元数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;My First Post&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: 2023-10-01T15:00:00+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>草稿状态：
默认情况下，新文章处于草稿状态（draft: true）。构建网站时不会包含草稿文章。&lt;/p>
&lt;ol start="3">
&lt;li>本地开发与预览
3.1 启动本地开发服务器
使用以下命令启动本地服务器，实时预览网站效果：&lt;/li>
&lt;/ol>
&lt;p>bash
复制
hugo server -D -w
参数说明：&lt;/p></description></item></channel></rss>